
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// New Model for individual users
model BioUser {
  id           String    @id @default(uuid())
  privyId      String    @unique // The User's Privy ID
  wallet       String?   @unique // User's primary wallet address
  email        String?   @unique
  fullName     String?
  avatarUrl    String?
  referralCode String?   @unique @default(uuid()) // Auto-generate a referral code
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  memberships  ProjectMember[]   // Projects the user is a member of
  invitesSent  ProjectInvite[] @relation("InvitesSent") // Invites sent by the user
  chatMessages ChatMessage[]   // Messages sent by the user

  // Self-relation for referrals
  referredById String?
  referredBy   BioUser?        @relation("Referrals", fields: [referredById], references: [id])
  referrals    BioUser[]       @relation("Referrals") // Users referred by this user
}

// New Model for the shared Project/DAO/Team
model Project {
  id                   String        @id @default(uuid())
  wallet               String        @unique
  privyId              String?       @unique
  level                Int           @default(1)
  fullName             String?
  email                String?
  projectName          String?
  projectDescription   String?
  projectVision        String?
  scientificReferences String?
  credentialLinks      String?
  teamMembers          String?
  motivation           String?
  progress             String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  referralCode         String?       @unique
  referredById         String?
  referralSource       String?
  projectLinks         String?
  ChatSessions         ChatSession[]
  Discord              Discord?
  NFTs                 NFT[]
  referredBy           Project?      @relation("Referrals", fields: [referredById], references: [id])
  referrals            Project[]     @relation("Referrals")
}

model NFT {
  id              String   @id @default(uuid())
  type            String
  mintedAt        DateTime @default(now())
  projectId       String
  transactionHash String?
  imageUrl        String?
  project         Project  @relation(fields: [projectId], references: [id])
}

// Updated Discord Model
model Discord {
  id                String    @id @default(uuid())
  serverId          String    @unique // Keep Discord Server ID unique
  inviteLink        String?
  memberCount       Int?
  papersShared      Int       @default(0)
  messagesCount     Int       @default(0)
  qualityScore      Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  inviteLink        String
  botAdded          Boolean   @default(false)
  botAddedAt        DateTime?
  verificationToken String?
  verified          Boolean   @default(false)
  serverIcon        String?
  serverName        String?
  projectId         String    @unique
  project           Project   @relation(fields: [projectId], references: [id])
}

// Updated ChatSession Model
model ChatSession {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  projectId String
  messages  ChatMessage[]
  project   Project       @relation(fields: [projectId], references: [id])
}

model ChatMessage {
  id            String   @id @default(uuid())
  sessionId     String
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  timestamp     DateTime @default(now())
  content       String   @db.Text // Use Text for potentially long messages
  isFromAgent   Boolean
  actionTaken   String?  // e.g., MINT_NFT, DISCORD_SETUP
  actionSuccess Boolean? // true/false if action was attempted

  // Optional relationship to BioUser for authorship
  bioUserId String?
  bioUser   BioUser? @relation(fields: [bioUserId], references: [id], onDelete: SetNull) // SetNull if user is deleted
}

// --- The OLD Project model definition should be REMOVED ---
// model Project { ... } // DELETE THIS OLD DEFINITION
