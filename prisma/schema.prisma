generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BioUser {
  id                  String          @id @default(uuid())
  privyId             String          @unique
  wallet              String?         @unique
  email               String?         @unique
  fullName            String?
  avatarUrl           String?
  referralCode        String?         @unique @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  referredById        String?
  discordAccessToken  String?
  discordAvatar       String?
  discordConnectedAt  DateTime?
  discordId           String?         @unique
  discordRefreshToken String?
  discordUsername     String?
  twitterAccessToken  String?
  twitterAvatar       String?
  twitterConnectedAt  DateTime?
  twitterId           String?         @unique
  twitterName         String?
  twitterRefreshToken String?
  twitterUsername     String?
  referredBy          BioUser?        @relation("Referrals", fields: [referredById], references: [id])
  referrals           BioUser[]       @relation("Referrals")
  chatMessages        ChatMessage[]
  invitesSent         ProjectInvite[] @relation("InvitesSent")
  memberships         ProjectMember[]
}

model Project {
  id                     String          @id @default(uuid())
  level                  Int             @default(1)
  scientificReferences   String?
  credentialLinks        String?
  motivation             String?
  progress               String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  teamDescription        String?
  teamMembers            String?
  projectLinks           String?
  referralSource         String?
  privyId                String?         @unique
  projectDescription     String?
  projectName            String?
  projectVision          String?
  referralCode           String?         @unique
  referredById           String?
  verifiedScientistCount Int             @default(0)
  ChatSessions           ChatSession[]
  dkgFiles               DKGFile[]
  Discord                Discord?
  NFTs                   NFT[]
  referredBy             Project?        @relation("Referrals", fields: [referredById], references: [id])
  referrals              Project[]       @relation("Referrals")
  invites                ProjectInvite[]
  members                ProjectMember[]
  Twitter                Twitter?

  @@index([privyId])
  @@index([referralCode])
}

model NFT {
  id              String   @id @default(uuid())
  type            String
  mintedAt        DateTime @default(now())
  projectId       String
  transactionHash String?
  imageUrl        String?
  metadataUri     String?
  tokenId         String?
  project         Project  @relation(fields: [projectId], references: [id])
}

model DiscordMember {
  id                   String              @id @default(uuid())
  discordId            String              @unique
  discordUsername      String
  discordAvatar        String?
  linkedinUrl          String?
  scientificProfileUrl String?
  motivationToJoin     String?
  isOnboarded          Boolean             @default(false)
  joinedAt             DateTime            @default(now())
  messageCount         Int                 @default(0)
  paperContributions   Int                 @default(0)
  
  // Points system fields
  totalPoints          Int                 @default(0)
  messagePoints        Int                 @default(0)
  paperPoints          Int                 @default(0)
  weeklyPoints         Int                 @default(0)
  monthlyPoints        Int                 @default(0)
  qualityMultiplier    Float               @default(1.0)
  rank                 Int?                @default(0)
  streak               Int                 @default(0)
  lastActivityDate     DateTime?
  lastWeeklyReset      DateTime?
  lastMonthlyReset     DateTime?
  
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  discordServerId      String
  discord              Discord             @relation(fields: [discordServerId], references: [serverId], onDelete: Cascade)
  scientificProfiles   ScientificProfile[]
  activities           MemberActivity[]
  badges               MemberBadge[]
  messages             DiscordMessage[]

  @@index([discordServerId, totalPoints])
  @@index([discordServerId, weeklyPoints])
  @@index([discordServerId, monthlyPoints])
}

model DiscordMessage {
  id          String   @id @default(uuid())
  messageId   String   @unique // Discord message ID
  channelId   String   // Discord channel ID  
  content     String   // Message content
  userId      String   // Discord user ID who sent the message
  username    String   // Discord username
  qualityScore Int     @default(50) // Quality score of the message (0-100)
  isLowValue  Boolean  @default(false) // Whether message is considered low-value
  sentAt      DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  discordId   String   // Foreign key to Discord table
  discord     Discord  @relation(fields: [discordId], references: [id], onDelete: Cascade)
  
  // Optional: Link to member if available
  memberId    String?
  member      DiscordMember? @relation(fields: [memberId], references: [id])

  @@index([discordId, sentAt])
  @@index([userId, sentAt])
}

model MemberActivity {
  id           String    @id @default(uuid())
  memberId     String
  member       DiscordMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  activityType String    // 'message_sent', 'paper_shared', 'badge_earned', etc.
  points       Int       @default(0)
  description  String?   // Human readable description
  metadata     Json?     // Additional metadata about the activity
  createdAt    DateTime  @default(now())

  @@index([memberId, createdAt])
}

model MemberBadge {
  id        String    @id @default(uuid())
  memberId  String
  member    DiscordMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  badgeType String    // 'early_adopter', 'paper_expert', 'discussion_leader', etc.
  earnedAt  DateTime  @default(now())

  @@unique([memberId, badgeType]) // Prevent duplicate badges
  @@index([memberId])
}

model ScientificProfile {
  id          String        @id @default(uuid())
  url         String
  platform    String
  profileId   String?
  hIndex      Int?
  citations   Int?
  memberId    String
  lastScraped DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  member      DiscordMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model DiscordPaper {
  id          String   @id @default(uuid())
  url         String   // The paper URL or PDF link
  title       String?  // Extracted or provided paper title
  authors     String?  // Paper authors if available
  doi         String?  // DOI if detected
  platform    String?  // e.g., "arxiv", "nature", "biorxiv", "pdf"
  messageId   String   // Discord message ID where paper was shared
  channelId   String   // Discord channel ID where paper was shared
  userId      String   // Discord user ID who shared the paper
  username    String   // Discord username who shared the paper
  sharedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  discordId   String   // Foreign key to Discord table
  discord     Discord  @relation(fields: [discordId], references: [id], onDelete: Cascade)

  @@index([discordId])
  @@index([messageId])
  @@index([sharedAt])
}

model Discord {
  id                String          @id @default(uuid())
  serverId          String          @unique
  memberCount       Int?
  papersShared      Int             @default(0)
  messagesCount     Int             @default(0)
  qualityScore      Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  inviteLink        String?
  botAdded          Boolean         @default(false)
  botAddedAt        DateTime?
  verificationToken String?
  verified          Boolean         @default(false)
  serverIcon        String?
  serverName        String?
  projectId         String          @unique
  project           Project         @relation(fields: [projectId], references: [id])
  members           DiscordMember[]
  papers            DiscordPaper[]
  messages          DiscordMessage[]

  @@index([serverId])
}

model ChatSession {
  id          String        @id @default(uuid())
  updatedAt   DateTime      @updatedAt
  projectId   String
  createdAt   DateTime      @default(now())
  sessionType String?       @default("coreagent")
  messages    ChatMessage[]
  project     Project       @relation(fields: [projectId], references: [id])
}

model ChatMessage {
  id            String      @id @default(uuid())
  content       String
  isFromAgent   Boolean
  timestamp     DateTime    @default(now())
  sessionId     String
  actionTaken   String?
  actionSuccess Boolean?
  bioUserId     String?
  bioUser       BioUser?    @relation(fields: [bioUserId], references: [id])
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model ProjectMember {
  id        String   @id @default(uuid())
  role      String
  joinedAt  DateTime @default(now())
  bioUserId String
  projectId String
  bioUser   BioUser  @relation(fields: [bioUserId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([bioUserId, projectId])
}

model ProjectInvite {
  id            String   @id @default(uuid())
  projectId     String
  inviterUserId String
  inviteeEmail  String
  token         String   @unique
  status        String   @default("pending")
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  inviter       BioUser  @relation("InvitesSent", fields: [inviterUserId], references: [id])
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Twitter {
  id                String    @id @default(uuid())
  projectId         String    @unique
  connected         Boolean   @default(false)
  twitterUsername   String?
  twitterId         String?
  introTweetsCount  Int       @default(0)
  tweetIds          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  twitterSpaceDate  DateTime?
  twitterSpaceUrl   String?
  blogpostDate      DateTime?
  blogpostUrl       String?
  twitterThreadDate DateTime?
  twitterThreadUrl  String?
  loomVideoDate     DateTime?
  loomVideoUrl      String?
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model DKGFile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      String
  filename  String?
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model sheets_sync_queue {
  id           Int       @id @default(autoincrement())
  record_id    String
  record_type  String
  operation    String
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  processed_at DateTime? @db.Timestamptz(6)
  status       String?
}
