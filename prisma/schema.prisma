generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// New Model for individual users
model BioUser {
  id           String    @id @default(uuid())
  privyId      String    @unique // The User's Privy ID
  wallet       String?   @unique // User's primary wallet address
  email        String?   @unique
  fullName     String?
  avatarUrl    String?
  referralCode String?   @unique @default(uuid()) // Auto-generate a referral code
  
  // Discord connection fields
  discordId    String?   @unique // Discord user ID
  discordUsername String? // Discord username
  discordAvatar  String? // Discord avatar URL
  discordConnectedAt DateTime? // When the user connected their Discord
  discordRefreshToken String? // For refreshing Discord auth
  discordAccessToken String? // For Discord API access

  // Twitter connection fields
  twitterId    String?   @unique // Twitter user ID
  twitterUsername String? // Twitter handle/username
  twitterName  String?   // Twitter display name
  twitterAvatar String?  // Twitter profile image URL
  twitterConnectedAt DateTime? // When the user connected their Twitter
  twitterAccessToken String? // For Twitter API access
  twitterRefreshToken String? // For Twitter API refresh

  // Relationships
  memberships  ProjectMember[]   // Projects the user is a member of
  invitesSent  ProjectInvite[] @relation("InvitesSent") // Invites sent by the user
  chatMessages ChatMessage[]   // Messages sent by the user

  // Self-relation for referrals
  referredById String?
  referredBy   BioUser?        @relation("Referrals", fields: [referredById], references: [id])
  referrals    BioUser[]       @relation("Referrals") // Users referred by this user

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// New Model for the shared Project/DAO/Team
model Project {
  id                   String           @id @default(uuid())
  privyId              String?          @unique
  level                Int              @default(1)
  projectName          String?
  projectDescription   String?
  projectVision        String?
  scientificReferences String?
  credentialLinks      String?
  teamMembers          String?
  teamDescription      String?
  motivation           String?
  progress             String?
  referralCode         String?          @unique
  referredById         String?
  referralSource       String?
  projectLinks         String?
  ChatSessions         ChatSession[]
  Discord              Discord?
  NFTs                 NFT[]
  members              ProjectMember[]
  invites              ProjectInvite[]
  referredBy           Project?         @relation("Referrals", fields: [referredById], references: [id])
  referrals            Project[]        @relation("Referrals")
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model NFT {
  id              String   @id @default(uuid())
  type            String
  projectId       String
  transactionHash String?
  imageUrl        String?
  project         Project  @relation(fields: [projectId], references: [id])
  mintedAt        DateTime @default(now())
}

// New Model for tracking Discord members
model DiscordMember {
  id                  String   @id @default(uuid())
  discordId           String   @unique // Discord user ID
  discordUsername     String   // Discord username
  discordAvatar       String?  // Discord avatar URL
  linkedinUrl         String?  // LinkedIn profile URL
  scientificProfileUrl String? // URL to scientific profile (e.g., Google Scholar, ORCID, ResearchGate)
  motivationToJoin    String?  @db.Text // Why they joined the Discord/BioDAO
  isOnboarded         Boolean  @default(false) // Whether they've completed onboarding
  paperContributions  Int      @default(0) // Count of research papers shared
  messageCount        Int      @default(0) // Count of messages sent
  
  // Link to the Discord server they're a member of
  discordServerId     String
  discord             Discord  @relation(fields: [discordServerId], references: [serverId], onDelete: Cascade)
  
  // New relation to scientific profiles
  scientificProfiles  ScientificProfile[]
  
  joinedAt            DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// New Model for tracking multiple scientific profiles per Discord member
model ScientificProfile {
  id              String        @id @default(uuid())
  url             String        // The full URL to the scientific profile
  platform        String        // e.g., "Google Scholar", "ORCID", "ResearchGate", "Exaly"
  profileId       String?       // The ID/username from the platform (if extractable)
  hIndex          Int?          // H-index if available
  citations       Int?          // Citation count if available
  
  // Relation to the Discord member
  memberId        String
  member          DiscordMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  // Metadata
  lastScraped     DateTime?     // When profile metrics were last updated
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Updated Discord Model
model Discord {
  id                String    @id @default(uuid())
  serverId          String    @unique // Keep Discord Server ID unique
  inviteLink        String?
  memberCount       Int?
  papersShared      Int       @default(0)
  messagesCount     Int       @default(0)
  qualityScore      Int       @default(0)
  botAdded          Boolean   @default(false)
  botAddedAt        DateTime?
  verificationToken String?
  verified          Boolean   @default(false)
  serverIcon        String?
  serverName        String?
  projectId         String    @unique
  project           Project   @relation(fields: [projectId], references: [id])
  members           DiscordMember[] // New relation to track Discord members
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Updated ChatSession Model
model ChatSession {
  id        String        @id @default(uuid())
  projectId String
  messages  ChatMessage[]
  project   Project       @relation(fields: [projectId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ChatMessage {
  id            String   @id @default(uuid())
  sessionId     String
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  timestamp     DateTime @default(now())
  content       String   @db.Text // Use Text for potentially long messages
  isFromAgent   Boolean
  actionTaken   String?  // e.g., MINT_NFT, DISCORD_SETUP
  actionSuccess Boolean? // true/false if action was attempted

  // Optional relationship to BioUser for authorship
  bioUserId String?
  bioUser   BioUser? @relation(fields: [bioUserId], references: [id], onDelete: SetNull) // SetNull if user is deleted
}

// Linking table for User <-> Project relationship with roles
model ProjectMember {
  id        String   @id @default(uuid())
  role      String   // e.g., "founder", "member", "admin"
  joinedAt  DateTime @default(now())

  bioUserId String
  bioUser   BioUser  @relation(fields: [bioUserId], references: [id], onDelete: Cascade) // Link to BioUser

  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade) // Link to Project

  @@unique([bioUserId, projectId]) // User can only be a member of a project once
}

// Model for tracking co-founder/member invites
model ProjectInvite {
  id            String    @id @default(uuid())
  projectId     String
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inviterUserId String
  inviter       BioUser   @relation("InvitesSent", fields: [inviterUserId], references: [id])
  inviteeEmail  String    // Email the invite was sent to
  token         String    @unique // Secure, single-use token
  status        String    @default("pending") // "pending", "accepted", "expired", "revoked"
  expiresAt     DateTime  // Set an expiry time for the token
  createdAt     DateTime  @default(now())
}